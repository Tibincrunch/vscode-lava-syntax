{
  "Filter address": {
    "prefix": "Address",
    "description": "Provides an address for the person you provide.",
    "body": "| Address:'${1|Home,Work|}','${2:[[city]], [[state]]}'"
  },
  "Filter campus": {
    "prefix": "Campus",
    "description": "Campus returns the person's campus. Since a person can have more that one campus (if they are a part of more than one family) the first campus will be provided. If you would like an array of all their campuses you can provide the 'All' extension.",
    "body": "Campus"
  },
  "Filter children": {
    "prefix": "Children",
    "description": "Returns a list of children for the person.",
    "body": "Children"
  },
  "Filter DeleteUserPreference": {
    "prefix": "DeleteUserPreference",
    "description": "Rock has the concept of saved settings / preferences for each user. This filter allows you to clean up the setting based on it's key.",
    "body": "DeleteUserPreference:'${1:Key}'"
  },
  "Filter FamilySalutation": {
    "prefix": "FamilySalutation",
    "description":
      "Returns the salutation of the family for a given person. (Options: includeKids, includeInactive,useFormalName,FinalSelerator,Separator)",
    "body":
      "FamilySalutation:'${1|true,false|}','${2|true,false|}','${3|true,false|}','${4:and}','${5:,}'"
  },
  "Filter GeofencingGroupMembers": {
    "prefix": "GeofencingGroupMembers",
    "description": "Returns a collection of group members whose groups geofence the person's map location address.",
    "body": "GeofencingGroupMembers:'${1:GroupTypeId}','${1:GroupRoleId}'"
  },
  "Filter GeofencingGroups": {
    "prefix": "GeofencingGroups",
    "description": "Returns a collection of groups that geofence the person's map location address.",
    "body": "GeofencingGroups:'${1:GroupTypeId}'"
  },
  "Filter GetPersonAlternateId ": {
    "prefix": "GetPersonAlternateId",
    "description": "Returns the person's alternate id.",
    "body": "GetPersonAlternateId"
  },
  "Filter GetUserPreference": {
    "prefix": "GetUserPreference",
    "description": "Rock has the concept of saved settings / preferences for each user. This filter allows you to retrieve the setting based on it's key. This is a great way of remembering something about the user (like settings from the last time they ran something) for use when they return.",
    "body": "GetUserPreference:'${1:Key}'"
  },
  "Filter Group": {
    "prefix": "Group",
    "description": "Returns group member information if a person is in a specific group.",
    "body": "Group:'${1:GroupId}','${2|All,Active,Inactive,Pending|}'"
  },
  "Filter Groups": {
    "prefix": "Groups",
    "description": "Returns a list of group member models of a specified group type that an individual belongs to.",
    "body": "Groups:'${1:GroupTypeId}','${2|All,Active,Inactive,Pending|}'"
  },
  "Filter Groups Attended": {
    "prefix": "GroupsAttended",
    "description": "Returns a list of groups that a person attended within a provided group type.",
    "body": "GroupsAttended:'${1:GroupTypeId}'"
  },
  "Filter HasSigned": {
    "prefix": "HasSigned",
    "description": "Allows you to determine if someone has already signed a document.",
    "body": "HasSignedDocument:${1:DocumentId},'${2:ifTrue}','${3:ifFalse}'"
  },
  "Filter HasSigned If": {
    "prefix": "HasSignedIf",
    "description": "Person filter: Groups",
    "body": [
      "{%- assign hasSigned = ${1:CurrentPerson} | HasSignedDocument:${2:DocumentId} -%}",
      "{%- if hasSigned -%}",
      "\t{{ ${1}.NickName }} has signed this document.",
      "{%- endif -%}"
    ]
  },
  "Filter Head of Household": {
    "prefix": "HeadOfHousehold",
    "description": "Returns the head of household of the provided person.",
    "body": "HeadOfHousehold"
  },
  "Filter LastAttendedGroupOfType": {
    "prefix": "LastAttendedGroupOfType",
    "description": "Returns the latest attendance record for a group of the type given.",
    "body": "LastAttendedGroupOfType:'${1:GroupTypeId}'"
  },
  "Filter NearestGroup": {
    "prefix": "NearestGroup",
    "description": "Returns the nearest group of a specified group type to the person's mapped location address.",
    "body": "NearestGroup:'${1:GroupTypeId}'"
  },
  "Filter Parents": {
    "prefix": "Parents",
    "description": "Returns a list of the adults in the family of a specified person.",
    "body": "Parents"
  },
  "Filter PersonActionIdentifier": {
    "prefix": "PersonActionIdentifier",
    "description": "Creates a non-security type token that identifies a person and a corresponding action. This action is intended for use by developers.",
    "body": "PersonActionIdentifier:':'${1:photo-opt-out}''"
  },
  "Filter PersonByAliasGuid": {
    "prefix": "PersonByAliasGuid",
    "description": "Returns a full person object from the Guid of a person alias.",
    "body": "PersonByAliasGuid"
  },
  "Filter PersonByAliasId": {
    "prefix": "PersonByAliasId",
    "description": "Returns a full person object from the Id of a person alias.",
    "body": "PersonByAliasId"
  },
  "Filter PersonByGuid": {
    "prefix": "PersonByGuid",
    "description": "Returns a full person object from the Guid of the person.",
    "body": "PersonByGuid"
  },
  "Filter PersonById": {
    "prefix": "PersonById",
    "description": "Returns a full person object from the Id of the person.",
    "body": "PersonById"
  },
  "Filter PersonByPersonAlternateId": {
    "prefix": "PersonByPersonAlternateId",
    "description": "Returns a person from the provided alternate id.",
    "body": "PersonByPersonAlternateId"
  },
  "Filter PersonTokenCreate": {
    "prefix": "PersonTokenCreate",
    "description": "Creates a person token for a provided person.",
    "body":
      "PersonTokenCreate:${1:expireMinutesIntornull},${2:usageLimitIntornull},${3:pageIdIntornull}"
  },
  "Filter PersonTokenRead": {
    "prefix": "PersonTokenRead",
    "description": "Converts a person token to a person object.",
    "body": [
      "{%- assign token = 'Global' | PageParameter:'${1:rckipid}' -%}",
      "{%- assign person = token | PersonTokenRead:${2:false},${3:optionalPageId} -%}"
    ]
  },
  "Filter PhoneNumber": {
    "prefix": "PhoneNumber",
    "description": "Provides a phone number for the person you provide.",
    "body": "PhoneNumber:'${1|Mobile,Home,Work,Other|}'"
  },
  "Filter SetUserPreference": {
    "prefix": "SetUserPreference",
    "description": "Rock has the concept of saved settings / preferences for each user. This filter allows you to save the setting based on it's key and provided value. This is a great way of remembering something about the user (like settings from the last time they ran something) for use when they return.",
    "body": "SetUserPreference:'${1:settingKey}','${2:settingValue}'"
  },
  "Filter Spouse": {
    "prefix": "Spouse",
    "description": "Returns the spouse of the provided person.",
    "body": "Spouse"
  },
  "Filter ZebraPhoto": {
    "prefix": "ZebraPhoto",
    "description": "Returns a person's profile photo data in ZPL format for use in Zebra printer labels. If the person has no photo, the default silhouette photo (adult/child, male/female) is used.",
    "body": "ZebraPhoto:'${1:sizeInteger}'"
  }
}
